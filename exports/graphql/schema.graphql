type AboutPage {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  AboutContent: String
  HeaderCover: UploadFile
  HeaderText: String
}

input AboutPageInput {
  AboutContent: String
  HeaderCover: ID
  HeaderText: String
}

input ArticleInput {
  content: String
  title: String
  categories: [ID]
  author: ID
  coverImage: ID
  excerpt: String
  publish: Boolean
}

type Articles {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  content: String
  title: String
  author: UsersPermissionsUser
  coverImage: UploadFile
  excerpt: String
  publish: Boolean
  categories(sort: String, limit: Int, start: Int, where: JSON): [Categories]
}

type Categories {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  articles(sort: String, limit: Int, start: Int, where: JSON): [Articles]
}

input CategoryInput {
  name: String
  articles: [ID]
}

type ComponentMenuItemsMetaDataMenuItemsMeta {
  id: ID!
  maxItemsLimit: Int
  seeMoreItemsText: String
}

input ComponentMenuItemsMetaDataMenuItemsMetaInput {
  maxItemsLimit: Int
  seeMoreItemsText: String
}

input ComponentMenuListMenuItemInput {
  Home: Boolean
  About: Boolean
  Blog: Boolean
}

type ComponentMenuListMenuItems {
  id: ID!
  Home: Boolean
  About: Boolean
  Blog: Boolean
}

input createArticleInput {
  data: ArticleInput
}

type createArticlePayload {
  article: Articles
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Categories
}

input createFileInput {
  data: FileInput
}

type createFilePayload {
  file: UploadFile
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type deleteAboutPagePayload {
  aboutPage: AboutPage
}

input deleteArticleInput {
  where: InputID
}

type deleteArticlePayload {
  article: Articles
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Categories
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type deleteFooterPayload {
  footer: Footer
}

type deleteHeaderPayload {
  header: Header
}

type deleteHomePagePayload {
  homePage: HomePage
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type deleteSiteMetaPayload {
  siteMeta: SiteMeta
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editAboutPageInput {
  AboutContent: String
  HeaderCover: ID
  HeaderText: String
}

input editArticleInput {
  content: String
  title: String
  categories: [ID]
  author: ID
  coverImage: ID
  excerpt: String
  publish: Boolean
}

input editCategoryInput {
  name: String
  articles: [ID]
}

input editComponentMenuItemsMetaDataMenuItemsMetaInput {
  id: ID
  maxItemsLimit: Int
  seeMoreItemsText: String
}

input editComponentMenuListMenuItemInput {
  id: ID
  Home: Boolean
  About: Boolean
  Blog: Boolean
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editFooterInput {
  copyrightsText: String
}

input editHeaderInput {
  logoText: String
  logo: ID
  menuItems: editComponentMenuListMenuItemInput
  menuItemsMeta: editComponentMenuItemsMetaDataMenuItemsMetaInput
}

input editHomePageInput {
  title: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editSiteMetaInput {
  title: String
  description: String
  logo: ID
  mainMenu: JSON
  author: String
  logoText: String
  copyrights: String
  defaultTheme: ENUM_SITEMETA_DEFAULTTHEME
  showMenuItems: Int
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

enum ENUM_SITEMETA_DEFAULTTHEME {
  dark
  light
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

type Footer {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  copyrightsText: String
}

input FooterInput {
  copyrightsText: String
}

type Header {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  logoText: String
  logo: UploadFile
  menuItems: ComponentMenuListMenuItems
  menuItemsMeta: ComponentMenuItemsMetaDataMenuItemsMeta
}

input HeaderInput {
  logoText: String
  logo: ID
  menuItems: ComponentMenuListMenuItemInput
  menuItemsMeta: ComponentMenuItemsMetaDataMenuItemsMetaInput
}

type HomePage {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
}

input HomePageInput {
  title: String
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | AboutPage | updateAboutPagePayload | deleteAboutPagePayload | Articles | createArticlePayload | updateArticlePayload | deleteArticlePayload | Categories | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | Footer | updateFooterPayload | deleteFooterPayload | Header | updateHeaderPayload | deleteHeaderPayload | HomePage | updateHomePagePayload | deleteHomePagePayload | SiteMeta | updateSiteMetaPayload | deleteSiteMetaPayload | UploadFile | createFilePayload | updateFilePayload | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | ComponentMenuItemsMetaDataMenuItemsMeta | ComponentMenuListMenuItems

type Mutation {
  updateAboutPage(input: updateAboutPageInput): updateAboutPagePayload
  deleteAboutPage: deleteAboutPagePayload
  createArticle(input: createArticleInput): createArticlePayload
  updateArticle(input: updateArticleInput): updateArticlePayload
  deleteArticle(input: deleteArticleInput): deleteArticlePayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  updateFooter(input: updateFooterInput): updateFooterPayload
  deleteFooter: deleteFooterPayload
  updateHeader(input: updateHeaderInput): updateHeaderPayload
  deleteHeader: deleteHeaderPayload
  updateHomePage(input: updateHomePageInput): updateHomePagePayload
  deleteHomePage: deleteHomePagePayload
  updateSiteMeta(input: updateSiteMetaInput): updateSiteMetaPayload
  deleteSiteMeta: deleteSiteMetaPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UserInput!): UsersPermissionsLoginPayload!
}

type Query {
  aboutPage: AboutPage
  article(id: ID!): Articles
  articles(sort: String, limit: Int, start: Int, where: JSON): [Articles]
  category(id: ID!): Categories
  categories(sort: String, limit: Int, start: Int, where: JSON): [Categories]
  footer: Footer
  header: Header
  homePage: HomePage
  siteMeta: SiteMeta
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type SiteMeta {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  description: String
  logo: UploadFile
  mainMenu: JSON
  author: String
  logoText: String
  copyrights: String
  defaultTheme: ENUM_SITEMETA_DEFAULTTHEME
  showMenuItems: Int
}

input SiteMetaInput {
  title: String
  description: String
  logo: ID
  mainMenu: JSON
  author: String
  logoText: String
  copyrights: String
  defaultTheme: ENUM_SITEMETA_DEFAULTTHEME
  showMenuItems: Int
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateAboutPageInput {
  data: editAboutPageInput
}

type updateAboutPagePayload {
  aboutPage: AboutPage
}

input updateArticleInput {
  where: InputID
  data: editArticleInput
}

type updateArticlePayload {
  article: Articles
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Categories
}

input updateFileInput {
  where: InputID
  data: editFileInput
}

type updateFilePayload {
  file: UploadFile
}

input updateFooterInput {
  data: editFooterInput
}

type updateFooterPayload {
  footer: Footer
}

input updateHeaderInput {
  data: editHeaderInput
}

type updateHeaderPayload {
  header: Header
}

input updateHomePageInput {
  data: editHomePageInput
}

type updateHomePagePayload {
  homePage: HomePage
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSiteMetaInput {
  data: editSiteMetaInput
}

type updateSiteMetaPayload {
  siteMeta: SiteMeta
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}
